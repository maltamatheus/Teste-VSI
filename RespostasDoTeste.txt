1. Provide an example scenario where overriding the equals() method is necessary in Java. Explain the key considerations when implementing this method, such as ensuring it aligns with the hashCode() method. Include code examples if possible.

	R: É importante de sobrescrever (overriding) os métodos equals e hashcode em especial em casos em que a comparação entre objetos se faz necessária.

2. Explain how you would use a design pattern to decouple your code from a third-party library that might be replaced in the future. Describe the advantages and limitations of your chosen approach, and provide a small code snippet illustrating its application.

3. Describe your experience with Angular, including its core features and use cases. Provide an example of a practical application where you used Angular and include a code snippet
demonstrating a key feature, such as component communication, data binding, or service integration.

	R: Minha experiência com angular envolve desenvolvimento e manutenção em aplicações nos mais diversos segmentos de negócio. O uso do Angular potencializa o desenvolvimento de aplicações Web, onde as funcionalidades podem ser segregadas em componentes e serviços, tornando possível sua escalabilidade e robustez.

	Abaixo, um exemplo de componente que designa um serviço:
	@Injectable()
	export class CursosService {

		emitirCursoCriado = new EventEmitter<string>;
		static criouNovoCurso = new EventEmitter<string>;

		cursos: string[] = ['Angular', 'Java', 'Oracle'];

		constructor(private logService: LogService){
			console.log('CursosService');
		}

		getCursos(){
			return this.cursos;
		}

		addCurso(curso: string){
			this.cursos.push(curso);
			this.emitirCursoCriado.emit(curso);
			CursosService.criouNovoCurso.emit(curso);
			this.logService.ConsoleLog(`Criado o curso ${curso}`);
		}
	}

4. Discuss the techniques you use to prevent SQL injection attacks in web applications. Provide examples of code showing secure implementations, such as using parameterized
queries or ORMs. Mention any additional measures you take to secure the database layer.

5. Describe the steps you would take to diagnose and improve the performance of a batch process that interacts with a database and an FTP server. Explain how you would identify
bottlenecks, optimize database queries, improve logic execution, and enhance file transfer efficiency. Provide examples of tools or techniques you would use during the
analysis.

6. Given the tables above, write the SQL query that:
	a. Returns the names of all Salesperson that don’t have any order with Samsonic.
		R: select s.name from salesperson s inner join orders o on s.id = o.salesperson_id
											inner join customer c on o.customer_id = c.id
		   where c.name <> 'Samsonic'

	b. Updates the names of Salesperson that have 2 or more orders. It’s necessary to add an
	‘*’ in the end of the name.

	update salesperson s
	set s.name = concat(s.name,'*')
	where exists (select 1
				  from orders o
				  where s.id = o.salesperson_id
				  having count(1) >= 2)

	c. Deletes all Ssalesperson that placed orders to the city of Jackson.
	delete salesperson s
	where exists (select 1
				  from orders o inner customers c on o.customer_id = c.id
				  where s.id = o.salesperson_id
				  and c.city = 'Jackson')

	d. The total sales amount for each Salesperson. If the salesperson hasn’t sold anything,
	show zero.
	select s.id, s.name, nvl(sum(o.amout),0)
	from salesperson s inner join orders o on s.id = o.salesperson_id
	group by s.id, s.name;

7. The customer has a system called XYZ and intends to start updates split into 3 phases. The requirements for the first phase are as follows:
	1. Enable new data entries in the system, which will serve as input for the second phase.

	2. Implement functionality to create, update, delete, and search plants.
		o Plants should have the following attributes:
			 Code: Numeric only, mandatory, and unique.
			 Description: Alphanumeric, up to 10 characters, optional.
		o Only admin users can delete plants.

	3. Ensure that the system prevents duplication of plant codes.

	Task: Based on the above information:

	1. Write a use case or user story for this scenario, ensuring that it clearly addresses the requirements.
	2. Highlight any business rules or assumptions relevant to the solution.
	3. Describe any validations or security measures you would implement in the system.
	4. Suggest how you would test this functionality, including examples of edge cases.

8. Consider the following description of a system functionality:

	User Registration
		 A screen allows users to insert, delete, or update user information.
		 Each user has properties: name, email, address, and phone, where name and email are mandatory fields.
		 Emails must be unique across all users.
		 Only admin users can delete other users.

	Task:

	1. Describe the types of tests you would implement (e.g., unit, integration, or end-to-end tests) and explain the scenarios you would test to ensure the functionality works
	as expected.

	2. Provide examples of edge cases and how you would handle them.

	3. Include an example of a test case in code or pseudocode for one or more scenarios.